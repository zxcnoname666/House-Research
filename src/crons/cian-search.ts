import { spyFetch } from "#utils/spyFetch.ts";
import { cianParseFromAgent } from "#workflows/cian-parser.ts";
import { sendToTopic, sendToMainChannel } from "#telegram";
import {CIAN_SEARCH_COOKIE} from "#env";
import {Config} from "#config";
import {log} from "#logger";
import { pooledMap } from "@std/async";
import { ensureDirSync } from "@std/fs";

// ----------------------------  KV & –æ—á–µ—Ä–µ–¥—å  ----------------------------
ensureDirSync("kv");
const kv = await Deno.openKv("kv/cian.sqlite3");
const processingQueue = new Set<string>();
let inProgress = false;
// ------------------------------------------------------------------------

interface CianSearchOfferResponse {
    fullUrl: string;
    exportPdfLink: string;
    description: string;
    photos: { fullUrl: string }[];
    geo: { userInput: string };
}

Deno.cron("Cian Search every 30 min", "*/30 * * * *", run).catch(log.error);
run().catch(log.warn);

async function run() {
    log.debug("Cian Search");

    if (inProgress) {
        log.info("Cian Search is in progress");
        return;
    }

    const config = (await Config.get()).cianSearch;

    const ads: CianSearchOfferResponse[] = [];
    let currentPage = 0;

    // ------------ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã ------------
    while (true) {
        currentPage++;

        const json = await spyFetch(
            "https://api.cian.ru/lk-specialist/v1/search-offers/",
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Cookie: CIAN_SEARCH_COOKIE,
                },
                body: JSON.stringify({
                    _type: "flatrent",
                    engine_version: { type: "term", value: 2 },
                    currency: { type: "term", value: 2 },
                    wp: { type: "term", value: true },
                    for_day: { type: "term", value: "!1" },
                    price: { type: "range", value: { lte: config.maxPrice, gte: config.minPrice} },
                    geo: { type: "geo", value: config.geo.map(id => ({ type: "district", id })) },
                    region: { type: "terms", value: config.regions },
                    sort: { type: "term", value: "total_price_desc" },
                    page: { type: "term", value: currentPage },
                }),
            },
        ).then((resp) => resp.json());

        const offers = json.data.offersSerialized as CianSearchOfferResponse[];
        if (!offers.length) break;
        ads.push(...offers);
    }

    log.debug(`${ads.length} offers found on ${currentPage} pages`);

    inProgress = true;

    // ------------ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è ------------
    await Array.fromAsync(
        pooledMap(3, ads, handleOffer),   // X = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ¬´–∂–∏–≤—ã—Ö¬ª –ø—Ä–æ–º–∏—Å–æ–≤
    );

    inProgress = false;
}

async function handleOffer(offer: CianSearchOfferResponse) {
    // 1) —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ KV?
    const existsInKv = (await kv.get<boolean>(["offers", offer.fullUrl])).value;
    if (existsInKv) return;

    // 2) —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å-–æ—á–µ—Ä–µ–¥–∏?
    if (processingQueue.has(offer.fullUrl)) return;

    // --> –ø–æ–º–µ—á–∞–µ–º ¬´–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
    processingQueue.add(offer.fullUrl);

    try {
        log.debug("Processing:", offer.fullUrl);

        const exportUrl = new URL(offer.fullUrl);
        exportUrl.pathname = offer.exportPdfLink;

        const output = await cianParseFromAgent.run({
            exportUrl: exportUrl.toString(),
            images: offer.photos.map((p) => p.fullUrl),
            title: offer.description,
            address: offer.geo.userInput,
            metadata: JSON.stringify(offer),
        });

        await sendToTopic({
            topicKey: output.ratingKey,
            title: output.title,
            message: `${output.message}\n\nüîó –°—Å—ã–ª–∫–∞: ${offer.fullUrl}`,
            quotes: [output.routes],
            address: output.address,
            imageUrls: output.images,
            lat: output.geo.lat,
            lon: output.geo.lon,
        });

        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ KV
        await kv.set(["offers", offer.fullUrl], true);
    } catch (err) {
        // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–±–æ–µ
        log.error(err);
        await sendToMainChannel(`${err}`).catch(log.warn);
        await new Promise((resolve) => setTimeout(resolve, 5_000));
    } finally {
        // —Å–Ω–∏–º–∞–µ–º –ø–æ–º–µ—Ç–∫—É ¬´–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processingQueue.delete(offer.fullUrl);
    }
}


if (import.meta.main) {
    await run();
}
