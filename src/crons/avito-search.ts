import {avitoParseFromHtml} from "#workflows/avito-parser.ts";
import { sendToTopic } from "#telegram";
import {Config} from "#config";
import {log} from "#logger";
import { pooledMap } from "@std/async";
import { ensureDirSync } from "@std/fs";

// ----------------------------  KV & –æ—á–µ—Ä–µ–¥—å  ----------------------------
ensureDirSync("kv");
const kv = await Deno.openKv("kv/avito.sqlite3");
const processingQueue = new Set<string>();
let inProgress = false;
// ------------------------------------------------------------------------

Deno.cron("Avito Search every 30 min", "*/30 * * * *", run).catch(log.error);
run().catch(log.warn);

async function run() {
    log.debug("Avito Search");

    if (inProgress) {
        log.info("Avito Search is in progress");
        return;
    }

    const avitoDiskPath = (await Config.get()).avitoDiskPath;

    const ads: {file: string, html: string}[] = [];

    // ------------ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã ------------
    for (const entry of Deno.readDirSync(avitoDiskPath)) {
        if (!entry.isFile) {
            log.warn("Not a file:", entry.name);
            continue;
        }

        const text = Deno.readTextFileSync(`${avitoDiskPath}/${entry.name}`);
        ads.push({
            file: entry.name.split('.html')[0],
            html: text,
        });
    }

    log.debug(`[avito] ${ads.length} offers found in path "${avitoDiskPath}"`);

    inProgress = true;

    // ------------ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è ------------
    await Array.fromAsync(
        pooledMap(3, ads, handleOffer),   // X = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ¬´–∂–∏–≤—ã—Ö¬ª –ø—Ä–æ–º–∏—Å–æ–≤
    );

    inProgress = false;
}

async function handleOffer({file: offerKey, html: offer}: {file: string, html: string}) {
    // 1) —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ KV?
    const existsInKv = (await kv.get<boolean>(["offers", offerKey])).value;
    if (existsInKv) return;

    // 2) —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å-–æ—á–µ—Ä–µ–¥–∏?
    if (processingQueue.has(offerKey)) return;

    // --> –ø–æ–º–µ—á–∞–µ–º ¬´–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
    processingQueue.add(offerKey);

    try {
        log.debug("Processing:", offerKey);

        const output = await avitoParseFromHtml.run({
            html: offer,
        });

        await sendToTopic({
            topicKey: `${output.ratingKey}-avito`,
            title: output.title,
            message: `${output.message}\n\nüîó –°—Å—ã–ª–∫–∞: https://avito.ru/all/kvartiry/${offerKey}`,
            quotes: [output.routes],
            address: output.address,
            imageUrls: output.images,
            lat: output.geo.lat,
            lon: output.geo.lon,
        });

        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ KV
        await kv.set(["offers", offerKey], true);
    } catch (err) {
        // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–±–æ–µ
        log.error(err);
    } finally {
        // —Å–Ω–∏–º–∞–µ–º –ø–æ–º–µ—Ç–∫—É ¬´–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ¬ª –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processingQueue.delete(offerKey);
    }
}


if (import.meta.main) {
    await run();
}
